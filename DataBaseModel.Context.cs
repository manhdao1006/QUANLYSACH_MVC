//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QUANLYSACH_MVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Collections.Generic;
    using System.Data.SqlClient;

    public partial class SkyBrands_WebNCEntities3 : DbContext
    {
        public SkyBrands_WebNCEntities3()
            : base("name=SkyBrands_WebNCEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<PublishingCompany> PublishingCompany { get; set; }
    
        public virtual int psDeleteBook(string bookId)
        {
            var bookIdParameter = bookId != null ?
                new ObjectParameter("bookId", bookId) :
                new ObjectParameter("bookId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("psDeleteBook", bookIdParameter);
        }
    
        public virtual ObjectResult<psGetAccounts_Result> psGetAccounts(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<psGetAccounts_Result>("psGetAccounts", usernameParameter, passwordParameter);
        }
    
        public virtual int psGetAdmin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("psGetAdmin", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<psGetTableBooks_Result> psGetTableBooks(string bookId)
        {
            var bookIdParameter = bookId != null ?
                new ObjectParameter("bookId", bookId) :
                new ObjectParameter("bookId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<psGetTableBooks_Result>("psGetTableBooks", bookIdParameter);
        }

        public List<Books> GetBooksByCategoryId(int cid)
        {
            return this.Database.SqlQuery<Books>("EXEC psGetTableBooksByCid @cid", new SqlParameter("@cid", cid)).ToList();
        }

        public virtual ObjectResult<psGetTableBooksByCid_Result> psGetTableBooksByCid(Nullable<int> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<psGetTableBooksByCid_Result>("psGetTableBooksByCid", cidParameter);
        }
    
        public virtual ObjectResult<psGetTableCategories_Result> psGetTableCategories(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<psGetTableCategories_Result>("psGetTableCategories", categoryIdParameter);
        }
    
        public virtual ObjectResult<psGetTop4BooksByCid_Result> psGetTop4BooksByCid(Nullable<int> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<psGetTop4BooksByCid_Result>("psGetTop4BooksByCid", cidParameter);
        }
    
        public virtual int psInsertAccount(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("psInsertAccount", usernameParameter, passwordParameter);
        }
    
        public virtual int psInsertBook(string bookId, string bookName, string bookImage, string author, Nullable<decimal> price, Nullable<int> quantity, Nullable<int> publishingYear, string language, Nullable<int> numberPage, string form, Nullable<int> weight, string bookDescribe, Nullable<int> cid, Nullable<int> pcid)
        {
            var bookIdParameter = bookId != null ?
                new ObjectParameter("bookId", bookId) :
                new ObjectParameter("bookId", typeof(string));
    
            var bookNameParameter = bookName != null ?
                new ObjectParameter("bookName", bookName) :
                new ObjectParameter("bookName", typeof(string));
    
            var bookImageParameter = bookImage != null ?
                new ObjectParameter("bookImage", bookImage) :
                new ObjectParameter("bookImage", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var publishingYearParameter = publishingYear.HasValue ?
                new ObjectParameter("publishingYear", publishingYear) :
                new ObjectParameter("publishingYear", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            var numberPageParameter = numberPage.HasValue ?
                new ObjectParameter("numberPage", numberPage) :
                new ObjectParameter("numberPage", typeof(int));
    
            var formParameter = form != null ?
                new ObjectParameter("form", form) :
                new ObjectParameter("form", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(int));
    
            var bookDescribeParameter = bookDescribe != null ?
                new ObjectParameter("bookDescribe", bookDescribe) :
                new ObjectParameter("bookDescribe", typeof(string));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var pcidParameter = pcid.HasValue ?
                new ObjectParameter("pcid", pcid) :
                new ObjectParameter("pcid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("psInsertBook", bookIdParameter, bookNameParameter, bookImageParameter, authorParameter, priceParameter, quantityParameter, publishingYearParameter, languageParameter, numberPageParameter, formParameter, weightParameter, bookDescribeParameter, cidParameter, pcidParameter);
        }
    
        public virtual int psUpdateBook(string bookId, string bookName, string bookImage, string author, Nullable<decimal> price, Nullable<int> quantity, Nullable<int> publishingYear, string language, Nullable<int> numberPage, string form, Nullable<int> weight, string bookDescribe, Nullable<int> cid, Nullable<int> pcid)
        {
            var bookIdParameter = bookId != null ?
                new ObjectParameter("bookId", bookId) :
                new ObjectParameter("bookId", typeof(string));
    
            var bookNameParameter = bookName != null ?
                new ObjectParameter("bookName", bookName) :
                new ObjectParameter("bookName", typeof(string));
    
            var bookImageParameter = bookImage != null ?
                new ObjectParameter("bookImage", bookImage) :
                new ObjectParameter("bookImage", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var publishingYearParameter = publishingYear.HasValue ?
                new ObjectParameter("publishingYear", publishingYear) :
                new ObjectParameter("publishingYear", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            var numberPageParameter = numberPage.HasValue ?
                new ObjectParameter("numberPage", numberPage) :
                new ObjectParameter("numberPage", typeof(int));
    
            var formParameter = form != null ?
                new ObjectParameter("form", form) :
                new ObjectParameter("form", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(int));
    
            var bookDescribeParameter = bookDescribe != null ?
                new ObjectParameter("bookDescribe", bookDescribe) :
                new ObjectParameter("bookDescribe", typeof(string));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var pcidParameter = pcid.HasValue ?
                new ObjectParameter("pcid", pcid) :
                new ObjectParameter("pcid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("psUpdateBook", bookIdParameter, bookNameParameter, bookImageParameter, authorParameter, priceParameter, quantityParameter, publishingYearParameter, languageParameter, numberPageParameter, formParameter, weightParameter, bookDescribeParameter, cidParameter, pcidParameter);
        }

        public System.Data.Entity.DbSet<QUANLYSACH_MVC.psGetAccounts_Result> psGetAccounts_Result { get; set; }
    }
}
